import java.util.Stack;

public class CreatureOrganizer {

    public static void main(String[] args) {
        // Creature power levels
        Creature[] creatures = {
                new Creature("Dragon", 95),
                new Creature("Griffin", 88),
                new Creature("Unicorn", 78),
                new Creature("Phoenix", 92),
                new Creature("Centaur", 85)
        };

        // Sorting Algorithm :Descending Order
        bubbleSortDescending(creatures);
        System.out.println("Bubble Sort (Descending Order):");
        displayCreatures(creatures);

        // Optimizing Selection Sort :Ascending Order
        selectionSortAscending(creatures);
        System.out.println("\nSelection Sort (Ascending Order):");
        displayCreatures(creatures);

        // Using a Stack Data Structure :Descending Order
        Stack<Creature> creatureStack = new Stack<>();
        // Sorting creatures by power level before stacking
        for (Creature creature : creatures) {
            creatureStack.push(creature);
        }
        System.out.println("\nStack (Descending Order):");
        while (!creatureStack.isEmpty()) {
            Creature poppedCreature = creatureStack.pop();
            System.out.println(poppedCreature.getName() + " - " + poppedCreature.getPowerLevel());
        }
    }

    // Sorting Algorithm :Descending Order
    private static void bubbleSortDescending(Creature[] creatures) {
        int n = creatures.length;
        for (int i = 0; i < n - 1; i++) {
            for (int j = 0; j < n - i - 1; j++) {
                if (creatures[j].getPowerLevel() < creatures[j + 1].getPowerLevel()) {
                    // Swap creatures if the current creature has lower power level
                    Creature temp = creatures[j];
                    creatures[j] = creatures[j + 1];
                    creatures[j + 1] = temp;
                }
            }
        }
    }

    // Selection Sort (Ascending Order)
    private static void selectionSortAscending(Creature[] creatures) {
        int n = creatures.length;
        for (int i = 0; i < n - 1; i++) {
            int minIndex = i;
            for (int j = i + 1; j < n; j++) {
                if (creatures[j].getPowerLevel() < creatures[minIndex].getPowerLevel()) {
                    minIndex = j;
                }
            }
            // Swap creatures if a smaller power level is found
            Creature temp = creatures[minIndex];
            creatures[minIndex] = creatures[i];
            creatures[i] = temp;
        }
    }

    // Display Details Creature
    private static void displayCreatures(Creature[] creatures) {
        for (Creature creature : creatures) {
            System.out.println(creature.getName() + " - " + creature.getPowerLevel());
        }
    }
}

// Creature Class
class Creature {
    private String name;
    private int powerLevel;

    public Creature(String name, int powerLevel) {
        this.name = name;
        this.powerLevel = powerLevel;
    }

    public String getName() {
        return name;
    }

    public int getPowerLevel() {
        return powerLevel;
    }
}
